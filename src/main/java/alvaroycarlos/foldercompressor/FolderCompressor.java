/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alvaroycarlos.foldercompressor;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.zip.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author alvaroafonsolopez
 */
public class FolderCompressor extends javax.swing.JFrame {
    
    DefaultListModel modelo = new DefaultListModel();
    
    JFileChooser fc = new JFileChooser();

    List<String> ficheros;
    
    File carpetaOrigen;
    
    String carpetaDestino;
    
    int cantidadDatos = 0;
    
    boolean hecho = false;
    
    Tarea tarea = null;
    boolean cancelar = false;
    
    private class Tarea extends SwingWorker <Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try{
                
                barraProgreso.setValue(0);
                
                if (!carpetaDestino.endsWith(".zip")){
                    carpetaDestino += ".zip";
                }
                
                // Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;
                // Objeto para referenciar el archivo zip de salida
                FileOutputStream dest = new FileOutputStream(carpetaDestino);
                ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
                // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[4096];
                Iterator i = ficheros.iterator();
                
                int datosComprimidos = 0;
                
                while(i.hasNext()){
                    String filename = (String)i.next();
                    //System.out.println("Fichero a comprimir dentro de la tarea: " + carpetaOrigen + "/" + filename);
                    FileInputStream fi = new FileInputStream(carpetaOrigen + "/" + filename);
                    origin = new BufferedInputStream(fi, 4096);
                    ZipEntry entry = new ZipEntry( filename );
                    out.putNextEntry( entry );
                    // Leemos datos desde el archivo origen y se envían al archivo destino
                    int count;
                    while((count = origin.read(data, 0, 4096)) != -1){
                        out.write(data, 0, count);
                        datosComprimidos += count;
                        //System.out.println(datosComprimidos);
                        
                        System.out.println((int) (((double)datosComprimidos/(double)cantidadDatos)*100));
                        
                        barraProgreso.setValue((int) (((double)datosComprimidos/(double)cantidadDatos)*100));
                        Thread.sleep(15);
                    }
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                }
                // Cerramos el archivo zip
                out.close();
                hecho = true;
            }catch( Exception e ){
                File borrar = new File(carpetaDestino);
                borrar.delete();
                
                if(!cancelar){
                    JOptionPane.showMessageDialog(FolderCompressor.this, "En la seleción no pueden haber directorios.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                barraProgreso.setValue(0);
                hecho = false;
                cancelar = false;
            }
            
            return null;
        }
        
        @Override
        public void done(){
            if(hecho){
                JOptionPane.showMessageDialog(FolderCompressor.this, "Los archivos se han comprimido con éxito.", "Operación terminadad", JOptionPane.INFORMATION_MESSAGE);
            }
            hecho = false;
        }
    }

    /**
     * Creates new form FolderCompressor
     */
    public FolderCompressor() {
        initComponents();
        
        this.setResizable(false);
        
        this.setLocationRelativeTo(null);
        
        lista.setModel(modelo);
        
        barraProgreso.setStringPainted(true);
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraProgreso = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        cancelarBoton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();
        comprimir = new javax.swing.JButton();
        selecTodo = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Progreso de compresión:");

        cancelarBoton.setText("Cancelar");
        cancelarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBotonActionPerformed(evt);
            }
        });

        lista.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lista);

        comprimir.setText("Comprimir selección");
        comprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprimirActionPerformed(evt);
            }
        });

        selecTodo.setText("Seleccionar todo");
        selecTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecTodoActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivos");

        abrir.setText("Abrir carpeta");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelarBoton)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(selecTodo)
                        .addGap(66, 66, 66)
                        .addComponent(comprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selecTodo)
                    .addComponent(comprimir))
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelarBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        int res = fc.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION){
            carpetaOrigen = fc.getSelectedFile();
            //System.out.println(carpeta);
            modelo.removeAllElements();
            barraProgreso.setValue(0);
            
            System.out.println("Carpeta origen: " + carpetaOrigen);
            
            for (File fichero : carpetaOrigen.listFiles()) {
                modelo.addElement(fichero.getName());
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void selecTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecTodoActionPerformed
        int indices[] = new int[modelo.getSize()];
        for(int i = 0; i < modelo.getSize(); i++){
            indices[i] = i;
        }
        lista.setSelectedIndices(indices);
    }//GEN-LAST:event_selecTodoActionPerformed

    private void comprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprimirActionPerformed
        if (lista.getSelectedIndices().length > 0) {
            int res = fc.showSaveDialog(this);
            if (res == JFileChooser.APPROVE_OPTION){
                
                carpetaDestino = fc.getSelectedFile().getAbsolutePath();
                
                ficheros = new ArrayList<>();
                
                cantidadDatos = 0;

                for (String fichero : lista.getSelectedValuesList()) {
                    ficheros.add(fichero);
                    cantidadDatos += new File(carpetaOrigen.getAbsolutePath() + "/" + fichero).length();
                    System.out.println("Se añade el fichero '" + fichero + "' a la lista para comprimir");
                }
                
                tarea = new Tarea();
                tarea.execute();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay archivos seleccionados.", "Falta de datos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_comprimirActionPerformed

    private void cancelarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBotonActionPerformed
        cancelar = true;
        try{
            tarea.cancel(true);
        }catch(Exception e){
            
        }
       
    }//GEN-LAST:event_cancelarBotonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FolderCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FolderCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FolderCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FolderCompressor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FolderCompressor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton cancelarBoton;
    private javax.swing.JButton comprimir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lista;
    private javax.swing.JButton selecTodo;
    // End of variables declaration//GEN-END:variables
}
